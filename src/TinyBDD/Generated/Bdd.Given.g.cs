// <auto-generated/>
using System.Threading;
using System.Threading.Tasks;

namespace TinyBDD;

/// <summary>
/// Generated Given(...) overloads for Bdd that normalize factories/seeds to
/// <c>Func&lt;CancellationToken, ValueTask&lt;T&gt;&gt;</c> and call <c>ScenarioChain.Seed</c>.
/// </summary>
public static partial class Bdd
{
    /// <summary>
    /// Starts a <c>Given</c> step with an explicit title using a synchronous factory.
    /// </summary>
    /// /// <param name="title">Human-friendly step title.</param>
    /// /// <typeparam name="T">The type produced by the setup function.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">Synchronous factory for the initial value.</param>
    /// /// <returns>A <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public static ScenarioChain<T> Given<T>(ScenarioContext ctx, string title, Func<T> setup) =>
        Seed(ctx, title, Wrap(setup));

    /// <summary>
    /// Starts a <c>Given</c> step with an explicit title using an asynchronous Task-producing factory.
    /// </summary>
    /// /// <param name="title">Human-friendly step title.</param>
    /// /// <typeparam name="T">The type produced by the setup function.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">Task-producing factory for the initial value.</param>
    /// /// <returns>A <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public static ScenarioChain<T> Given<T>(ScenarioContext ctx, string title, Func<Task<T>> setup) =>
        Seed(ctx, title, Wrap(setup));

    /// <summary>
    /// Starts a <c>Given</c> step with an explicit title using a ValueTask-producing factory.
    /// </summary>
    /// /// <param name="title">Human-friendly step title.</param>
    /// /// <typeparam name="T">The type produced by the setup function.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">ValueTask-producing factory for the initial value.</param>
    /// /// <returns>A <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public static ScenarioChain<T> Given<T>(ScenarioContext ctx, string title, Func<ValueTask<T>> setup) =>
        Seed(ctx, title, Wrap(setup));

    /// <summary>
    /// Starts a token-aware <c>Given</c> step with an explicit title using an asynchronous factory that observes a CancellationToken.
    /// </summary>
    /// /// <param name="title">Human-friendly step title.</param>
    /// /// <typeparam name="T">The type produced by the setup function.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">Asynchronous factory that observes a <see cref="CancellationToken"/>.</param>
    /// /// <returns>A <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public static ScenarioChain<T> Given<T>(ScenarioContext ctx, string title, Func<CancellationToken, Task<T>> setup) =>
        Seed(ctx, title, Wrap(setup));

    /// <summary>
    /// Starts a token-aware <c>Given</c> step with an explicit title using a ValueTask-producing factory that observes a CancellationToken.
    /// </summary>
    /// /// <param name="title">Human-friendly step title.</param>
    /// /// <typeparam name="T">The type produced by the setup function.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">ValueTask-producing factory that observes a <see cref="CancellationToken"/>.</param>
    /// /// <returns>A <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public static ScenarioChain<T> Given<T>(ScenarioContext ctx, string title, Func<CancellationToken, ValueTask<T>> setup) =>
        Seed(ctx, title, Wrap(setup));

    /// <summary>
    /// Starts a <c>Given</c> step with an auto-generated title using a synchronous factory.
    /// </summary>
    /// /// <typeparam name="T">The type produced by the setup function.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">Synchronous factory for the initial value.</param>
    /// /// <returns>A <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public static ScenarioChain<T> Given<T>(ScenarioContext ctx, Func<T> setup) =>
        Seed(ctx, AutoTitle<T>(), Wrap(setup));

    /// <summary>
    /// Starts a <c>Given</c> step with an auto-generated title using an asynchronous Task-producing factory.
    /// </summary>
    /// /// <typeparam name="T">The type produced by the setup function.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">Task-producing factory for the initial value.</param>
    /// /// <returns>A <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public static ScenarioChain<T> Given<T>(ScenarioContext ctx, Func<Task<T>> setup) =>
        Seed(ctx, AutoTitle<T>(), Wrap(setup));

    /// <summary>
    /// Starts a <c>Given</c> step with an auto-generated title using a ValueTask-producing factory.
    /// </summary>
    /// /// <typeparam name="T">The type produced by the setup function.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">ValueTask-producing factory for the initial value.</param>
    /// /// <returns>A <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public static ScenarioChain<T> Given<T>(ScenarioContext ctx, Func<ValueTask<T>> setup) =>
        Seed(ctx, AutoTitle<T>(), Wrap(setup));

    /// <summary>
    /// Starts a token-aware <c>Given</c> step with an auto-generated title using an asynchronous factory that observes a CancellationToken.
    /// </summary>
    /// /// <typeparam name="T">The type produced by the setup function.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">Asynchronous factory that observes a <see cref="CancellationToken"/>.</param>
    /// /// <returns>A <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public static ScenarioChain<T> Given<T>(ScenarioContext ctx, Func<CancellationToken, Task<T>> setup) =>
        Seed(ctx, AutoTitle<T>(), Wrap(setup));

    /// <summary>
    /// Starts a token-aware <c>Given</c> step with an auto-generated title using a ValueTask-producing factory that observes a CancellationToken.
    /// </summary>
    /// /// <typeparam name="T">The type produced by the setup function.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">ValueTask-producing factory that observes a <see cref="CancellationToken"/>.</param>
    /// /// <returns>A <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public static ScenarioChain<T> Given<T>(ScenarioContext ctx, Func<CancellationToken, ValueTask<T>> setup) =>
        Seed(ctx, AutoTitle<T>(), Wrap(setup));

    /// <summary>
    /// Starts a <c>Given</c> step with an explicit title using a synchronous setup action plus a seed value.
    /// </summary>
    /// /// <param name="title">Human-friendly step title.</param>
    /// /// <typeparam name="T">The type produced by the seed value.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">Synchronous action that performs setup side-effects.</param>
    /// /// <param name="seed">Value seeded into the chain after performing <paramref name="setup"/>.</param>
    /// /// <returns>A <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public static ScenarioChain<T> Given<T>(ScenarioContext ctx, string title, Action setup, T seed) =>
        Seed(ctx, title, Wrap(setup, seed));

    /// <summary>
    /// Starts a <c>Given</c> step with an explicit title using a synchronous factory that accepts a seed value.
    /// </summary>
    /// /// <param name="title">Human-friendly step title.</param>
    /// /// <typeparam name="TIn">Seed type.</typeparam>
    /// /// <typeparam name="TOut">Result type.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">Synchronous factory for the initial value.</param>
    /// /// <param name="seed">Seed value passed to <paramref name="setup"/>.</param>
    /// /// <returns>A <see cref="ScenarioChain{TOut}"/> for further chaining.</returns>
    public static ScenarioChain<TOut> Given<TIn, TOut>(ScenarioContext ctx, string title, Func<TIn,TOut> setup, TIn seed) =>
        Seed(ctx, title, Wrap(setup, seed));

    /// <summary>
    /// Starts a token-aware <c>Given</c> step with an explicit title using an async factory (Task) that accepts a seed value and observes a CancellationToken.
    /// </summary>
    /// /// <param name="title">Human-friendly step title.</param>
    /// /// <typeparam name="TIn">Seed type.</typeparam>
    /// /// <typeparam name="TOut">Result type.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">Asynchronous factory that observes a <see cref="CancellationToken"/>.</param>
    /// /// <param name="seed">Seed value passed to <paramref name="setup"/>.</param>
    /// /// <returns>A <see cref="ScenarioChain{TOut}"/> for further chaining.</returns>
    public static ScenarioChain<TOut> Given<TIn, TOut>(ScenarioContext ctx, string title, Func<TIn, CancellationToken, Task<TOut>> setup, TIn seed) =>
        Seed(ctx, title, Wrap(setup, seed));

    /// <summary>
    /// Starts a token-aware <c>Given</c> step with an explicit title using an async factory (ValueTask&lt;T&gt;) that accepts a seed value and observes a CancellationToken.
    /// </summary>
    /// /// <param name="title">Human-friendly step title.</param>
    /// /// <typeparam name="TIn">Seed type.</typeparam>
    /// /// <typeparam name="TOut">Result type.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">ValueTask-producing factory that observes a <see cref="CancellationToken"/>.</param>
    /// /// <param name="seed">Seed value passed to <paramref name="setup"/>.</param>
    /// /// <returns>A <see cref="ScenarioChain{TOut}"/> for further chaining.</returns>
    public static ScenarioChain<TOut> Given<TIn, TOut>(ScenarioContext ctx, string title, Func<TIn, CancellationToken, ValueTask<TOut>> setup, TIn seed) =>
        Seed(ctx, title, ct => setup(seed, ct));

    /// <summary>
    /// Starts a token-aware <c>Given</c> step with an explicit title using an async side-effect (ValueTask) that observes a CancellationToken and keeps the seed value.
    /// </summary>
    /// /// <param name="title">Human-friendly step title.</param>
    /// /// <typeparam name="T">Type carried in the chain.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">Asynchronous side-effect that observes a <see cref="CancellationToken"/>.</param>
    /// /// <param name="seed">Value carried after the side-effect.</param>
    /// /// <returns>A <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public static ScenarioChain<T> Given<T>(ScenarioContext ctx, string title, Func<CancellationToken, ValueTask> setup, T seed) =>
        Seed(ctx, title, Wrap(setup, seed));

    /// <summary>
    /// Starts a token-aware <c>Given</c> step with an explicit title using an async side-effect (Task) that observes a CancellationToken and keeps the seed value.
    /// </summary>
    /// /// <param name="title">Human-friendly step title.</param>
    /// /// <typeparam name="T">Type carried in the chain.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">Asynchronous side-effect that observes a <see cref="CancellationToken"/>.</param>
    /// /// <param name="seed">Value carried after the side-effect.</param>
    /// /// <returns>A <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public static ScenarioChain<T> Given<T>(ScenarioContext ctx, string title, Func<CancellationToken, Task> setup, T seed) =>
        Seed(ctx, title, Wrap(setup, seed));

    /// <summary>
    /// Starts a token-aware <c>Given</c> step with an explicit title using an async factory (ValueTask&lt;T&gt;) that accepts a seed value and observes a CancellationToken.
    /// </summary>
    /// /// <param name="title">Human-friendly step title.</param>
    /// /// <typeparam name="T">The type produced by the setup function.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">Asynchronous factory that observes a <see cref="CancellationToken"/>.</param>
    /// /// <param name="seed">Seed value passed to <paramref name="setup"/>.</param>
    /// /// <returns>A <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public static ScenarioChain<T> Given<T>(ScenarioContext ctx, string title, Func<T, CancellationToken, ValueTask<T>> setup, T seed) =>
        Seed(ctx, title, Wrap<T>(setup, seed));

    /// <summary>
    /// Starts a token-aware <c>Given</c> step with an explicit title using an async side-effect (ValueTask) that accepts a seed value and observes a CancellationToken.
    /// </summary>
    /// /// <param name="title">Human-friendly step title.</param>
    /// /// <typeparam name="T">Type carried in the chain.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">Asynchronous side-effect that observes a <see cref="CancellationToken"/>.</param>
    /// /// <param name="seed">Value carried after the side-effect.</param>
    /// /// <returns>A <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public static ScenarioChain<T> Given<T>(ScenarioContext ctx, string title, Func<T, CancellationToken, ValueTask> setup, T seed) =>
        Seed(ctx, title, Wrap(setup, seed));

    /// <summary>
    /// Starts a <c>Given</c> step with an auto-generated title using a synchronous setup action plus a seed value.
    /// </summary>
    /// /// <typeparam name="T">The type produced by the seed value.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">Synchronous action that performs setup side-effects.</param>
    /// /// <param name="seed">Value seeded into the chain after performing <paramref name="setup"/>.</param>
    /// /// <returns>A <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public static ScenarioChain<T> Given<T>(ScenarioContext ctx, Action setup, T seed) =>
        Seed(ctx, AutoTitle<T>(), Wrap(setup, seed));

    /// <summary>
    /// Starts a <c>Given</c> step with an auto-generated title using a synchronous factory that accepts a seed value.
    /// </summary>
    /// /// <typeparam name="TIn">Seed type.</typeparam>
    /// /// <typeparam name="TOut">Result type.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">Synchronous factory for the initial value.</param>
    /// /// <param name="seed">Seed value passed to <paramref name="setup"/>.</param>
    /// /// <returns>A <see cref="ScenarioChain{TOut}"/> for further chaining.</returns>
    public static ScenarioChain<TOut> Given<TIn, TOut>(ScenarioContext ctx, Func<TIn,TOut> setup, TIn seed) =>
        Seed(ctx, AutoTitle<TOut>(), Wrap(setup, seed));

    /// <summary>
    /// Starts a token-aware <c>Given</c> step with an auto-generated title using an async factory (Task) that accepts a seed value and observes a CancellationToken.
    /// </summary>
    /// /// <typeparam name="TIn">Seed type.</typeparam>
    /// /// <typeparam name="TOut">Result type.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">Asynchronous factory that observes a <see cref="CancellationToken"/>.</param>
    /// /// <param name="seed">Seed value passed to <paramref name="setup"/>.</param>
    /// /// <returns>A <see cref="ScenarioChain{TOut}"/> for further chaining.</returns>
    public static ScenarioChain<TOut> Given<TIn, TOut>(ScenarioContext ctx, Func<TIn, CancellationToken, Task<TOut>> setup, TIn seed) =>
        Seed(ctx, AutoTitle<TOut>(), Wrap(setup, seed));

    /// <summary>
    /// Starts a token-aware <c>Given</c> step with an auto-generated title using an async factory (ValueTask&lt;T&gt;) that accepts a seed value and observes a CancellationToken.
    /// </summary>
    /// /// <typeparam name="TIn">Seed type.</typeparam>
    /// /// <typeparam name="TOut">Result type.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">ValueTask-producing factory that observes a <see cref="CancellationToken"/>.</param>
    /// /// <param name="seed">Seed value passed to <paramref name="setup"/>.</param>
    /// /// <returns>A <see cref="ScenarioChain{TOut}"/> for further chaining.</returns>
    public static ScenarioChain<TOut> Given<TIn, TOut>(ScenarioContext ctx, Func<TIn, CancellationToken, ValueTask<TOut>> setup, TIn seed) =>
        Seed(ctx, AutoTitle<TOut>(), ct => setup(seed, ct));

    /// <summary>
    /// Starts a token-aware <c>Given</c> step with an auto-generated title using an async side-effect (ValueTask) that observes a CancellationToken and keeps the seed value.
    /// </summary>
    /// /// <typeparam name="T">Type carried in the chain.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">Asynchronous side-effect that observes a <see cref="CancellationToken"/>.</param>
    /// /// <param name="seed">Value carried after the side-effect.</param>
    /// /// <returns>A <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public static ScenarioChain<T> Given<T>(ScenarioContext ctx, Func<CancellationToken, ValueTask> setup, T seed) =>
        Seed(ctx, AutoTitle<T>(), Wrap(setup, seed));

    /// <summary>
    /// Starts a token-aware <c>Given</c> step with an auto-generated title using an async side-effect (Task) that observes a CancellationToken and keeps the seed value.
    /// </summary>
    /// /// <typeparam name="T">Type carried in the chain.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">Asynchronous side-effect that observes a <see cref="CancellationToken"/>.</param>
    /// /// <param name="seed">Value carried after the side-effect.</param>
    /// /// <returns>A <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public static ScenarioChain<T> Given<T>(ScenarioContext ctx, Func<CancellationToken, Task> setup, T seed) =>
        Seed(ctx, AutoTitle<T>(), Wrap(setup, seed));

    /// <summary>
    /// Starts a token-aware <c>Given</c> step with an auto-generated title using an async factory (ValueTask&lt;T&gt;) that accepts a seed value and observes a CancellationToken.
    /// </summary>
    /// /// <typeparam name="T">The type produced by the setup function.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">Asynchronous factory that observes a <see cref="CancellationToken"/>.</param>
    /// /// <param name="seed">Seed value passed to <paramref name="setup"/>.</param>
    /// /// <returns>A <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public static ScenarioChain<T> Given<T>(ScenarioContext ctx, Func<T, CancellationToken, ValueTask<T>> setup, T seed) =>
        Seed(ctx, AutoTitle<T>(), Wrap<T>(setup, seed));

    /// <summary>
    /// Starts a token-aware <c>Given</c> step with an auto-generated title using an async side-effect (ValueTask) that accepts a seed value and observes a CancellationToken.
    /// </summary>
    /// /// <typeparam name="T">Type carried in the chain.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">Asynchronous side-effect that observes a <see cref="CancellationToken"/>.</param>
    /// /// <param name="seed">Value carried after the side-effect.</param>
    /// /// <returns>A <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public static ScenarioChain<T> Given<T>(ScenarioContext ctx, Func<T, CancellationToken, ValueTask> setup, T seed) =>
        Seed(ctx, AutoTitle<T>(), Wrap(setup, seed));

    /// <summary>
    /// Starts a <c>Given</c> step with an explicit title using a synchronous factory that accepts Task-based seed.
    /// </summary>
    /// /// <param name="title">Human-friendly step title.</param>
    /// /// <typeparam name="TIn">Seed type.</typeparam>
    /// /// <typeparam name="TOut">Result type.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">Factory that accepts a <see cref="Task{TIn}"/>.</param>
    /// /// <param name="seed">Seed value passed to <paramref name="setup"/>.</param>
    /// /// <returns>A <see cref="ScenarioChain{TOut}"/> for further chaining.</returns>
    public static ScenarioChain<TOut> Given<TIn, TOut>(ScenarioContext ctx, string title, Func<Task<TIn>, TOut> setup, Task<TIn> seed) =>
        Seed(ctx, title, Wrap(setup, seed));

    /// <summary>
    /// Starts a token-aware <c>Given</c> step with an explicit title using a synchronous factory that accepts Task-based seed and observes a CancellationToken.
    /// </summary>
    /// /// <param name="title">Human-friendly step title.</param>
    /// /// <typeparam name="TIn">Seed type.</typeparam>
    /// /// <typeparam name="TOut">Result type.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">Factory that observes a <see cref="CancellationToken"/>.</param>
    /// /// <param name="seed">Seed value passed to <paramref name="setup"/>.</param>
    /// /// <returns>A <see cref="ScenarioChain{TOut}"/> for further chaining.</returns>
    public static ScenarioChain<TOut> Given<TIn, TOut>(ScenarioContext ctx, string title, Func<Task<TIn>, CancellationToken, TOut> setup, Task<TIn> seed) =>
        Seed(ctx, title, Wrap(setup, seed));

    /// <summary>
    /// Starts a token-aware <c>Given</c> step with an explicit title using an async factory (Task) that accepts Task-based seed and observes a CancellationToken.
    /// </summary>
    /// /// <param name="title">Human-friendly step title.</param>
    /// /// <typeparam name="TIn">Seed type.</typeparam>
    /// /// <typeparam name="TOut">Result type.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">Asynchronous factory that observes a <see cref="CancellationToken"/>.</param>
    /// /// <param name="seed">Seed value passed to <paramref name="setup"/>.</param>
    /// /// <returns>A <see cref="ScenarioChain{TOut}"/> for further chaining.</returns>
    public static ScenarioChain<TOut> Given<TIn, TOut>(ScenarioContext ctx, string title, Func<Task<TIn>, CancellationToken, Task<TOut>> setup, Task<TIn> seed) =>
        Seed(ctx, title, Wrap(setup, seed));

    /// <summary>
    /// Starts a token-aware <c>Given</c> step with an explicit title using an async factory (ValueTask) that accepts Task-based seed and observes a CancellationToken.
    /// </summary>
    /// /// <param name="title">Human-friendly step title.</param>
    /// /// <typeparam name="TIn">Seed type.</typeparam>
    /// /// <typeparam name="TOut">Result type.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">ValueTask-producing factory that observes a <see cref="CancellationToken"/>.</param>
    /// /// <param name="seed">Seed value passed to <paramref name="setup"/>.</param>
    /// /// <returns>A <see cref="ScenarioChain{TOut}"/> for further chaining.</returns>
    public static ScenarioChain<TOut> Given<TIn, TOut>(ScenarioContext ctx, string title, Func<Task<TIn>, CancellationToken, ValueTask<TOut>> setup, Task<TIn> seed) =>
        Seed(ctx, title, Wrap(setup, seed));

    /// <summary>
    /// Starts a token-aware <c>Given</c> step with an explicit title using an async side-effect (ValueTask) that accepts Task-based seed and observes a CancellationToken.
    /// </summary>
    /// /// <param name="title">Human-friendly step title.</param>
    /// /// <typeparam name="T">Type carried in the chain.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">Asynchronous side-effect that observes a <see cref="CancellationToken"/>.</param>
    /// /// <param name="seed">Value carried after the side-effect.</param>
    /// /// <returns>A <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public static ScenarioChain<T> Given<T>(ScenarioContext ctx, string title, Func<Task<T>, CancellationToken, ValueTask> setup, Task<T> seed) =>
        Seed(ctx, title, Wrap(setup, seed));

    /// <summary>
    /// Starts a token-aware <c>Given</c> step with an explicit title using an async side-effect (Task) that accepts Task-based seed and observes a CancellationToken.
    /// </summary>
    /// /// <param name="title">Human-friendly step title.</param>
    /// /// <typeparam name="T">Type carried in the chain.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">Asynchronous side-effect that observes a <see cref="CancellationToken"/>.</param>
    /// /// <param name="seed">Value carried after the side-effect.</param>
    /// /// <returns>A <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public static ScenarioChain<T> Given<T>(ScenarioContext ctx, string title, Func<Task<T>, CancellationToken, Task> setup, Task<T> seed) =>
        Seed(ctx, title, Wrap(setup, seed));

    /// <summary>
    /// Starts a <c>Given</c> step with an auto-generated title using a synchronous factory that accepts Task-based seed.
    /// </summary>
    /// /// <typeparam name="TIn">Seed type.</typeparam>
    /// /// <typeparam name="TOut">Result type.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">Factory that accepts a <see cref="Task{TIn}"/>.</param>
    /// /// <param name="seed">Seed value passed to <paramref name="setup"/>.</param>
    /// /// <returns>A <see cref="ScenarioChain{TOut}"/> for further chaining.</returns>
    public static ScenarioChain<TOut> Given<TIn, TOut>(ScenarioContext ctx, Func<Task<TIn>, TOut> setup, Task<TIn> seed) =>
        Seed(ctx, AutoTitle<TOut>(), Wrap(setup, seed));

    /// <summary>
    /// Starts a token-aware <c>Given</c> step with an auto-generated title using a synchronous factory that accepts Task-based seed and observes a CancellationToken.
    /// </summary>
    /// /// <typeparam name="TIn">Seed type.</typeparam>
    /// /// <typeparam name="TOut">Result type.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">Factory that observes a <see cref="CancellationToken"/>.</param>
    /// /// <param name="seed">Seed value passed to <paramref name="setup"/>.</param>
    /// /// <returns>A <see cref="ScenarioChain{TOut}"/> for further chaining.</returns>
    public static ScenarioChain<TOut> Given<TIn, TOut>(ScenarioContext ctx, Func<Task<TIn>, CancellationToken, TOut> setup, Task<TIn> seed) =>
        Seed(ctx, AutoTitle<TOut>(), Wrap(setup, seed));

    /// <summary>
    /// Starts a token-aware <c>Given</c> step with an auto-generated title using an async factory (Task) that accepts Task-based seed and observes a CancellationToken.
    /// </summary>
    /// /// <typeparam name="TIn">Seed type.</typeparam>
    /// /// <typeparam name="TOut">Result type.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">Asynchronous factory that observes a <see cref="CancellationToken"/>.</param>
    /// /// <param name="seed">Seed value passed to <paramref name="setup"/>.</param>
    /// /// <returns>A <see cref="ScenarioChain{TOut}"/> for further chaining.</returns>
    public static ScenarioChain<TOut> Given<TIn, TOut>(ScenarioContext ctx, Func<Task<TIn>, CancellationToken, Task<TOut>> setup, Task<TIn> seed) =>
        Seed(ctx, AutoTitle<TOut>(), Wrap(setup, seed));

    /// <summary>
    /// Starts a token-aware <c>Given</c> step with an auto-generated title using an async factory (ValueTask) that accepts Task-based seed and observes a CancellationToken.
    /// </summary>
    /// /// <typeparam name="TIn">Seed type.</typeparam>
    /// /// <typeparam name="TOut">Result type.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">ValueTask-producing factory that observes a <see cref="CancellationToken"/>.</param>
    /// /// <param name="seed">Seed value passed to <paramref name="setup"/>.</param>
    /// /// <returns>A <see cref="ScenarioChain{TOut}"/> for further chaining.</returns>
    public static ScenarioChain<TOut> Given<TIn, TOut>(ScenarioContext ctx, Func<Task<TIn>, CancellationToken, ValueTask<TOut>> setup, Task<TIn> seed) =>
        Seed(ctx, AutoTitle<TOut>(), Wrap(setup, seed));

    /// <summary>
    /// Starts a token-aware <c>Given</c> step with an auto-generated title using an async side-effect (ValueTask) that accepts Task-based seed and observes a CancellationToken.
    /// </summary>
    /// /// <typeparam name="T">Type carried in the chain.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">Asynchronous side-effect that observes a <see cref="CancellationToken"/>.</param>
    /// /// <param name="seed">Value carried after the side-effect.</param>
    /// /// <returns>A <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public static ScenarioChain<T> Given<T>(ScenarioContext ctx, Func<Task<T>, CancellationToken, ValueTask> setup, Task<T> seed) =>
        Seed(ctx, AutoTitle<T>(), Wrap(setup, seed));

    /// <summary>
    /// Starts a token-aware <c>Given</c> step with an auto-generated title using an async side-effect (Task) that accepts Task-based seed and observes a CancellationToken.
    /// </summary>
    /// /// <typeparam name="T">Type carried in the chain.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">Asynchronous side-effect that observes a <see cref="CancellationToken"/>.</param>
    /// /// <param name="seed">Value carried after the side-effect.</param>
    /// /// <returns>A <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public static ScenarioChain<T> Given<T>(ScenarioContext ctx, Func<Task<T>, CancellationToken, Task> setup, Task<T> seed) =>
        Seed(ctx, AutoTitle<T>(), Wrap(setup, seed));

    /// <summary>
    /// Starts a <c>Given</c> step with an explicit title using a synchronous factory that accepts ValueTask-based seed.
    /// </summary>
    /// /// <param name="title">Human-friendly step title.</param>
    /// /// <typeparam name="TIn">Seed type.</typeparam>
    /// /// <typeparam name="TOut">Result type.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">Factory that accepts a <see cref="ValueTask{TIn}"/>.</param>
    /// /// <param name="seed">Seed value passed to <paramref name="setup"/>.</param>
    /// /// <returns>A <see cref="ScenarioChain{TOut}"/> for further chaining.</returns>
    public static ScenarioChain<TOut> Given<TIn, TOut>(ScenarioContext ctx, string title, Func<ValueTask<TIn>, TOut> setup, ValueTask<TIn> seed) =>
        Seed(ctx, title, Wrap(setup, seed));

    /// <summary>
    /// Starts a token-aware <c>Given</c> step with an explicit title using a synchronous factory that accepts ValueTask-based seed and observes a CancellationToken.
    /// </summary>
    /// /// <param name="title">Human-friendly step title.</param>
    /// /// <typeparam name="TIn">Seed type.</typeparam>
    /// /// <typeparam name="TOut">Result type.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">Factory that observes a <see cref="CancellationToken"/>.</param>
    /// /// <param name="seed">Seed value passed to <paramref name="setup"/>.</param>
    /// /// <returns>A <see cref="ScenarioChain{TOut}"/> for further chaining.</returns>
    public static ScenarioChain<TOut> Given<TIn, TOut>(ScenarioContext ctx, string title, Func<ValueTask<TIn>, CancellationToken, TOut> setup, ValueTask<TIn> seed) =>
        Seed(ctx, title, Wrap(setup, seed));

    /// <summary>
    /// Starts a token-aware <c>Given</c> step with an explicit title using an async factory (ValueTask) that accepts ValueTask-based seed and observes a CancellationToken.
    /// </summary>
    /// /// <param name="title">Human-friendly step title.</param>
    /// /// <typeparam name="TIn">Seed type.</typeparam>
    /// /// <typeparam name="TOut">Result type.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">ValueTask-producing factory that observes a <see cref="CancellationToken"/>.</param>
    /// /// <param name="seed">Seed value passed to <paramref name="setup"/>.</param>
    /// /// <returns>A <see cref="ScenarioChain{TOut}"/> for further chaining.</returns>
    public static ScenarioChain<TOut> Given<TIn, TOut>(ScenarioContext ctx, string title, Func<ValueTask<TIn>, CancellationToken, ValueTask<TOut>> setup, ValueTask<TIn> seed) =>
        Seed(ctx, title, ct => setup(seed, ct));

    /// <summary>
    /// Starts a <c>Given</c> step with an auto-generated title using a synchronous factory that accepts ValueTask-based seed.
    /// </summary>
    /// /// <typeparam name="TIn">Seed type.</typeparam>
    /// /// <typeparam name="TOut">Result type.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">Factory that accepts a <see cref="ValueTask{TIn}"/>.</param>
    /// /// <param name="seed">Seed value passed to <paramref name="setup"/>.</param>
    /// /// <returns>A <see cref="ScenarioChain{TOut}"/> for further chaining.</returns>
    public static ScenarioChain<TOut> Given<TIn, TOut>(ScenarioContext ctx, Func<ValueTask<TIn>, TOut> setup, ValueTask<TIn> seed) =>
        Seed(ctx, AutoTitle<TOut>(), Wrap(setup, seed));

    /// <summary>
    /// Starts a token-aware <c>Given</c> step with an auto-generated title using a synchronous factory that accepts ValueTask-based seed and observes a CancellationToken.
    /// </summary>
    /// /// <typeparam name="TIn">Seed type.</typeparam>
    /// /// <typeparam name="TOut">Result type.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">Factory that observes a <see cref="CancellationToken"/>.</param>
    /// /// <param name="seed">Seed value passed to <paramref name="setup"/>.</param>
    /// /// <returns>A <see cref="ScenarioChain{TOut}"/> for further chaining.</returns>
    public static ScenarioChain<TOut> Given<TIn, TOut>(ScenarioContext ctx, Func<ValueTask<TIn>, CancellationToken, TOut> setup, ValueTask<TIn> seed) =>
        Seed(ctx, AutoTitle<TOut>(), Wrap(setup, seed));

    /// <summary>
    /// Starts a token-aware <c>Given</c> step with an auto-generated title using an async factory (ValueTask) that accepts ValueTask-based seed and observes a CancellationToken.
    /// </summary>
    /// /// <typeparam name="TIn">Seed type.</typeparam>
    /// /// <typeparam name="TOut">Result type.</typeparam>
    /// /// <param name="ctx">Scenario context created by <see cref="CreateContext(object,string,ITraitBridge,ScenarioOptions)"/>.</param>
    /// /// <param name="setup">ValueTask-producing factory that observes a <see cref="CancellationToken"/>.</param>
    /// /// <param name="seed">Seed value passed to <paramref name="setup"/>.</param>
    /// /// <returns>A <see cref="ScenarioChain{TOut}"/> for further chaining.</returns>
    public static ScenarioChain<TOut> Given<TIn, TOut>(ScenarioContext ctx, Func<ValueTask<TIn>, CancellationToken, ValueTask<TOut>> setup, ValueTask<TIn> seed) =>
        Seed(ctx, AutoTitle<TOut>(), ct => setup(seed, ct));

}
