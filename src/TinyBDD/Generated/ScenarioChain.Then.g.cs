// <auto-generated/>
namespace TinyBDD;
public sealed partial class ScenarioChain<T>
{
    /// <summary>
    /// Adds a <c>Then</c> boolean assertion with an explicit title
    /// </summary>
    /// <param name="title">Display title for the assertion.</param>
    /// <param name="predicate">Predicate evaluated against the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> Then(string title, Func<T, bool> predicate) =>
        ThenPredicate(title, ToCT(predicate));

    /// <summary>
    /// Adds a <c>Then</c> boolean assertion with an explicit title
    /// </summary>
    /// <param name="title">Display title for the assertion.</param>
    /// <param name="predicate">Predicate evaluated against the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> Then(string title, Func<T, Task<bool>> predicate) =>
        ThenPredicate(title, ToCT(predicate));

    /// <summary>
    /// Adds a <c>Then</c> boolean assertion with an explicit title observing a token.
    /// </summary>
    /// <param name="title">Display title for the assertion.</param>
    /// <param name="predicate">Predicate evaluated against the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> Then(string title, Func<T, CancellationToken, Task<bool>> predicate) =>
        ThenPredicate(title, ToCT(predicate));

    /// <summary>
    /// Adds a <c>Then</c> boolean assertion with an explicit title
    /// </summary>
    /// <param name="title">Display title for the assertion.</param>
    /// <param name="predicate">Predicate evaluated against the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> Then(string title, Func<T, ValueTask<bool>> predicate) =>
        ThenPredicate(title, ToCT(predicate));

    /// <summary>
    /// Adds a <c>Then</c> boolean assertion with an explicit title observing a token.
    /// </summary>
    /// <param name="title">Display title for the assertion.</param>
    /// <param name="predicate">Predicate evaluated against the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> Then(string title, Func<T, CancellationToken, ValueTask<bool>> predicate) =>
        ThenPredicate(title, ToCT(predicate));

    /// <summary>
    /// Adds a <c>Then</c> boolean assertion with a default title
    /// </summary>
    /// <param name="predicate">Predicate evaluated against the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> Then(Func<T, bool> predicate) =>
        ThenPredicate(string.Empty, ToCT(predicate));

    /// <summary>
    /// Adds a <c>Then</c> boolean assertion with a default title
    /// </summary>
    /// <param name="predicate">Predicate evaluated against the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> Then(Func<T, Task<bool>> predicate) =>
        ThenPredicate(string.Empty, ToCT(predicate));

    /// <summary>
    /// Adds a <c>Then</c> boolean assertion with a default title observing a token.
    /// </summary>
    /// <param name="predicate">Predicate evaluated against the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> Then(Func<T, CancellationToken, Task<bool>> predicate) =>
        ThenPredicate(string.Empty, ToCT(predicate));

    /// <summary>
    /// Adds a <c>Then</c> boolean assertion with a default title
    /// </summary>
    /// <param name="predicate">Predicate evaluated against the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> Then(Func<T, ValueTask<bool>> predicate) =>
        ThenPredicate(string.Empty, ToCT(predicate));

    /// <summary>
    /// Adds a <c>Then</c> boolean assertion with a default title observing a token.
    /// </summary>
    /// <param name="predicate">Predicate evaluated against the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> Then(Func<T, CancellationToken, ValueTask<bool>> predicate) =>
        ThenPredicate(string.Empty, ToCT(predicate));

    /// <summary>
    /// Adds a <c>Then</c> boolean assertion with an explicit title (no value parameter).
    /// </summary>
    /// <param name="title">Display title for the assertion.</param>
    /// <param name="predicate">Predicate to evaluate.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> Then(string title, Func<bool> predicate) =>
        ThenPredicateNoValue(title, ToCT(predicate));

    /// <summary>
    /// Adds a <c>Then</c> boolean assertion with an explicit title (no value parameter).
    /// </summary>
    /// <param name="title">Display title for the assertion.</param>
    /// <param name="predicate">Predicate to evaluate.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> Then(string title, Func<Task<bool>> predicate) =>
        ThenPredicateNoValue(title, ToCT(predicate));

    /// <summary>
    /// Adds a <c>Then</c> boolean assertion with a default title (no value parameter).
    /// </summary>
    /// <param name="predicate">Predicate to evaluate.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> Then(Func<bool> predicate) =>
        ThenPredicateNoValue(string.Empty, ToCT(predicate));

    /// <summary>
    /// Adds a <c>Then</c> boolean assertion with a default title (no value parameter).
    /// </summary>
    /// <param name="predicate">Predicate to evaluate.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> Then(Func<Task<bool>> predicate) =>
        ThenPredicateNoValue(string.Empty, ToCT(predicate));

    /// <summary>
    /// Adds a <c>Then</c> assertion with an explicit title
    /// </summary>
    /// <param name="title">Display title for the assertion.</param>
    /// <param name="assertion">Asynchronous assertion that receives the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> Then(string title, Func<T, Task> assertion) =>
        ThenAssert(title, ToCT(assertion));

    /// <summary>
    /// Adds a <c>Then</c> assertion with an explicit title observing a token.
    /// </summary>
    /// <param name="title">Display title for the assertion.</param>
    /// <param name="assertion">Asynchronous assertion that receives the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> Then(string title, Func<T, CancellationToken, Task> assertion) =>
        ThenAssert(title, ToCT(assertion));

    /// <summary>
    /// Adds a <c>Then</c> assertion with an explicit title
    /// </summary>
    /// <param name="title">Display title for the assertion.</param>
    /// <param name="assertion">Asynchronous assertion that receives the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> Then(string title, Func<T, ValueTask> assertion) =>
        ThenAssert(title, ToCT(assertion));

    /// <summary>
    /// Adds a <c>Then</c> assertion with an explicit title observing a token.
    /// </summary>
    /// <param name="title">Display title for the assertion.</param>
    /// <param name="assertion">Asynchronous assertion that receives the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> Then(string title, Func<T, CancellationToken, ValueTask> assertion) =>
        ThenAssert(title, ToCT(assertion));

    /// <summary>
    /// Adds a <c>Then</c> assertion with a default title
    /// </summary>
    /// <param name="assertion">Asynchronous assertion that receives the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> Then(Func<T, Task> assertion) =>
        ThenAssert(string.Empty, ToCT(assertion));

    /// <summary>
    /// Adds a <c>Then</c> assertion with a default title observing a token.
    /// </summary>
    /// <param name="assertion">Asynchronous assertion that receives the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> Then(Func<T, CancellationToken, Task> assertion) =>
        ThenAssert(string.Empty, ToCT(assertion));

    /// <summary>
    /// Adds a <c>Then</c> assertion with a default title
    /// </summary>
    /// <param name="assertion">Asynchronous assertion that receives the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> Then(Func<T, ValueTask> assertion) =>
        ThenAssert(string.Empty, ToCT(assertion));

    /// <summary>
    /// Adds a <c>Then</c> assertion with a default title observing a token.
    /// </summary>
    /// <param name="assertion">Asynchronous assertion that receives the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> Then(Func<T, CancellationToken, ValueTask> assertion) =>
        ThenAssert(string.Empty, ToCT(assertion));

    /// <summary>
    /// Adds a <c>Then</c> assertion with an explicit title (no value parameter).
    /// </summary>
    /// <param name="title">Display title for the assertion.</param>
    /// <param name="assertion">Asynchronous assertion.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> Then(string title, Func<Task> assertion) =>
        ThenAssert(title, (_, _) => assertion());

    /// <summary>
    /// Adds a <c>Then</c> assertion with an explicit title (no value parameter).
    /// </summary>
    /// <param name="title">Display title for the assertion.</param>
    /// <param name="assertion">Asynchronous assertion.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> Then(string title, Func<ValueTask> assertion) =>
        ThenAssert(title, (_, _) => assertion());

    /// <summary>
    /// Adds a <c>Then</c> assertion with a default title (no value parameter).
    /// </summary>
    /// <param name="assertion">Asynchronous assertion.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> Then(Func<Task> assertion) =>
        ThenAssert(string.Empty, (_, _) => assertion());

    /// <summary>
    /// Adds a <c>Then</c> assertion with a default title (no value parameter).
    /// </summary>
    /// <param name="assertion">Asynchronous assertion.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> Then(Func<ValueTask> assertion) =>
        ThenAssert(string.Empty, (_, _) => assertion());

    /// <summary>
    /// Adds a <c>Then</c> transform that returns a value used only for assertion side-effects.
    /// </summary>
    /// <typeparam name="TOut">The result produced by the assertion delegate (ignored by the chain).</typeparam>
    /// <param name="title">Display title for the assertion.</param>
    /// <param name="assertion">Asynchronous function that receives the carried value.</param>
    /// <returns>A <see cref="ThenChain{TOut}"/> for further chaining.</returns>
    public ThenChain<TOut> Then<TOut>(string title, Func<T, Task<TOut>> assertion) =>
        ThenAssert(title, (v, _) => assertion(v));

    /// <summary>
    /// Adds a <c>Then</c> transform that returns a value used only for assertion side-effects.
    /// </summary>
    /// <typeparam name="TOut">The result produced by the assertion delegate (ignored by the chain).</typeparam>
    /// <param name="title">Display title for the assertion.</param>
    /// <param name="assertion">Asynchronous function that receives the carried value and a token.</param>
    /// <returns>A <see cref="ThenChain{TOut}"/> for further chaining.</returns>
    public ThenChain<TOut> Then<TOut>(string title, Func<T, CancellationToken, Task<TOut>> assertion) =>
        ThenAssert(title, assertion);

    /// <summary>
    /// Adds a <c>Then</c> transform that returns a value used only for assertion side-effects.
    /// </summary>
    /// <typeparam name="TOut">The result produced by the assertion delegate (ignored by the chain).</typeparam>
    /// <param name="assertion">Asynchronous function that receives the carried value.</param>
    /// <returns>A <see cref="ThenChain{TOut}"/> for further chaining.</returns>
    public ThenChain<TOut> Then<TOut>(Func<T, Task<TOut>> assertion) =>
        ThenAssert(string.Empty, (v, _) => assertion(v));

    /// <summary>
    /// Adds a <c>Then</c> transform that returns a value used only for assertion side-effects.
    /// </summary>
    /// <typeparam name="TOut">The result produced by the assertion delegate (ignored by the chain).</typeparam>
    /// <param name="assertion">Asynchronous function that receives the carried value and a token.</param>
    /// <returns>A <see cref="ThenChain{TOut}"/> for further chaining.</returns>
    public ThenChain<TOut> Then<TOut>(Func<T, CancellationToken, Task<TOut>> assertion) =>
        ThenAssert(string.Empty, assertion);

}
