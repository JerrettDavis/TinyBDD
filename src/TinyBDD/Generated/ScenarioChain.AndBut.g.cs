// <auto-generated/>
namespace TinyBDD;
public sealed partial class ScenarioChain<T>
{
    /// <summary>
    /// Adds a <c>And</c> transformation with an explicit title using sync function.
    /// </summary>
    /// /// <typeparam name="TOut">The result type of the transformation.</typeparam>
    /// /// <param name="title">Display title for this step.</param>
    /// /// <param name="f">Transformation applied to the carried value.</param>
    /// /// <returns>A new <see cref="ScenarioChain{TOut}"/> carrying the transformed value.</returns>
    public ScenarioChain<TOut> And<TOut>(string title, Func<T, TOut> f) =>
        TransformInherit(StepWord.And, title, ToCT(f));

    /// <summary>
    /// Adds a <c>And</c> transformation with an explicit title using task function.
    /// </summary>
    /// /// <typeparam name="TOut">The result type of the transformation.</typeparam>
    /// /// <param name="title">Display title for this step.</param>
    /// /// <param name="f">Transformation applied to the carried value.</param>
    /// /// <returns>A new <see cref="ScenarioChain{TOut}"/> carrying the transformed value.</returns>
    public ScenarioChain<TOut> And<TOut>(string title, Func<T, Task<TOut>> f) =>
        TransformInherit(StepWord.And, title, ToCT(f));

    /// <summary>
    /// Adds a <c>And</c> transformation with an explicit title using a token-aware task function.
    /// </summary>
    /// /// <typeparam name="TOut">The result type of the transformation.</typeparam>
    /// /// <param name="title">Display title for this step.</param>
    /// /// <param name="f">Transformation applied to the carried value.</param>
    /// /// <returns>A new <see cref="ScenarioChain{TOut}"/> carrying the transformed value.</returns>
    public ScenarioChain<TOut> And<TOut>(string title, Func<T, CancellationToken, Task<TOut>> f) =>
        TransformInherit(StepWord.And, title, ToCT(f));

    /// <summary>
    /// Adds a <c>And</c> transformation with an explicit title using value task function.
    /// </summary>
    /// /// <typeparam name="TOut">The result type of the transformation.</typeparam>
    /// /// <param name="title">Display title for this step.</param>
    /// /// <param name="f">Transformation applied to the carried value.</param>
    /// /// <returns>A new <see cref="ScenarioChain{TOut}"/> carrying the transformed value.</returns>
    public ScenarioChain<TOut> And<TOut>(string title, Func<T, ValueTask<TOut>> f) =>
        TransformInherit(StepWord.And, title, ToCT(f));

    /// <summary>
    /// Adds a <c>And</c> transformation with an explicit title using a token-aware value task function.
    /// </summary>
    /// /// <typeparam name="TOut">The result type of the transformation.</typeparam>
    /// /// <param name="title">Display title for this step.</param>
    /// /// <param name="f">Transformation applied to the carried value.</param>
    /// /// <returns>A new <see cref="ScenarioChain{TOut}"/> carrying the transformed value.</returns>
    public ScenarioChain<TOut> And<TOut>(string title, Func<T, CancellationToken, ValueTask<TOut>> f) =>
        TransformInherit(StepWord.And, title, ToCT(f));

    /// <summary>
    /// Adds a <c>And</c> transformation with a default title using sync function.
    /// </summary>
    /// /// <typeparam name="TOut">The result type of the transformation.</typeparam>
    /// /// <param name="f">Transformation applied to the carried value.</param>
    /// /// <returns>A new <see cref="ScenarioChain{TOut}"/> carrying the transformed value.</returns>
    public ScenarioChain<TOut> And<TOut>(Func<T, TOut> f) =>
        TransformInherit(StepWord.And, string.Empty, ToCT(f));

    /// <summary>
    /// Adds a <c>And</c> transformation with a default title using task function.
    /// </summary>
    /// /// <typeparam name="TOut">The result type of the transformation.</typeparam>
    /// /// <param name="f">Transformation applied to the carried value.</param>
    /// /// <returns>A new <see cref="ScenarioChain{TOut}"/> carrying the transformed value.</returns>
    public ScenarioChain<TOut> And<TOut>(Func<T, Task<TOut>> f) =>
        TransformInherit(StepWord.And, string.Empty, ToCT(f));

    /// <summary>
    /// Adds a <c>And</c> transformation with a default title using a token-aware task function.
    /// </summary>
    /// /// <typeparam name="TOut">The result type of the transformation.</typeparam>
    /// /// <param name="f">Transformation applied to the carried value.</param>
    /// /// <returns>A new <see cref="ScenarioChain{TOut}"/> carrying the transformed value.</returns>
    public ScenarioChain<TOut> And<TOut>(Func<T, CancellationToken, Task<TOut>> f) =>
        TransformInherit(StepWord.And, string.Empty, ToCT(f));

    /// <summary>
    /// Adds a <c>And</c> transformation with a default title using value task function.
    /// </summary>
    /// /// <typeparam name="TOut">The result type of the transformation.</typeparam>
    /// /// <param name="f">Transformation applied to the carried value.</param>
    /// /// <returns>A new <see cref="ScenarioChain{TOut}"/> carrying the transformed value.</returns>
    public ScenarioChain<TOut> And<TOut>(Func<T, ValueTask<TOut>> f) =>
        TransformInherit(StepWord.And, string.Empty, ToCT(f));

    /// <summary>
    /// Adds a <c>And</c> transformation with a default title using a token-aware value task function.
    /// </summary>
    /// /// <typeparam name="TOut">The result type of the transformation.</typeparam>
    /// /// <param name="f">Transformation applied to the carried value.</param>
    /// /// <returns>A new <see cref="ScenarioChain{TOut}"/> carrying the transformed value.</returns>
    public ScenarioChain<TOut> And<TOut>(Func<T, CancellationToken, ValueTask<TOut>> f) =>
        TransformInherit(StepWord.And, string.Empty, ToCT(f));

    /// <summary>
    /// Adds a <c>And</c> side-effect with an explicit title. Keeps the current value.
    /// </summary>
    /// /// <param name="title">Display title for this step.</param>
    /// /// <param name="effect">Side-effect that receives the carried value.</param>
    /// /// <returns>The same <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public ScenarioChain<T> And(string title, Action<T> effect) =>
        EffectInherit(StepWord.And, title, ToCT(effect));

    /// <summary>
    /// Adds a <c>And</c> side-effect with an explicit title. Keeps the current value.
    /// </summary>
    /// /// <param name="title">Display title for this step.</param>
    /// /// <param name="effect">Side-effect that receives the carried value.</param>
    /// /// <returns>The same <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public ScenarioChain<T> And(string title, Func<T, Task> effect) =>
        EffectInherit(StepWord.And, title, ToCT(effect));

    /// <summary>
    /// Adds a <c>And</c> side-effect with an explicit title. Keeps the current value.
    /// </summary>
    /// /// <param name="title">Display title for this step.</param>
    /// /// <param name="effect">Side-effect that receives the carried value.</param>
    /// /// <returns>The same <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public ScenarioChain<T> And(string title, Func<T, CancellationToken, Task> effect) =>
        EffectInherit(StepWord.And, title, ToCT(effect));

    /// <summary>
    /// Adds a <c>And</c> side-effect with an explicit title. Keeps the current value.
    /// </summary>
    /// /// <param name="title">Display title for this step.</param>
    /// /// <param name="effect">Side-effect that receives the carried value.</param>
    /// /// <returns>The same <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public ScenarioChain<T> And(string title, Func<T, ValueTask> effect) =>
        EffectInherit(StepWord.And, title, ToCT(effect));

    /// <summary>
    /// Adds a <c>And</c> side-effect with an explicit title. Keeps the current value.
    /// </summary>
    /// /// <param name="title">Display title for this step.</param>
    /// /// <param name="effect">Side-effect that receives the carried value.</param>
    /// /// <returns>The same <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public ScenarioChain<T> And(string title, Func<T, CancellationToken, ValueTask> effect) =>
        EffectInherit(StepWord.And, title, ToCT(effect));

    /// <summary>
    /// Adds a <c>And</c> side-effect with a default title. Keeps the current value.
    /// </summary>
    /// /// <param name="effect">Side-effect that receives the carried value.</param>
    /// /// <returns>The same <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public ScenarioChain<T> And(Action<T> effect) =>
        EffectInherit(StepWord.And, string.Empty, ToCT(effect));

    /// <summary>
    /// Adds a <c>And</c> side-effect with a default title. Keeps the current value.
    /// </summary>
    /// /// <param name="effect">Side-effect that receives the carried value.</param>
    /// /// <returns>The same <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public ScenarioChain<T> And(Func<T, Task> effect) =>
        EffectInherit(StepWord.And, string.Empty, ToCT(effect));

    /// <summary>
    /// Adds a <c>And</c> side-effect with a default title. Keeps the current value.
    /// </summary>
    /// /// <param name="effect">Side-effect that receives the carried value.</param>
    /// /// <returns>The same <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public ScenarioChain<T> And(Func<T, CancellationToken, Task> effect) =>
        EffectInherit(StepWord.And, string.Empty, ToCT(effect));

    /// <summary>
    /// Adds a <c>And</c> side-effect with a default title. Keeps the current value.
    /// </summary>
    /// /// <param name="effect">Side-effect that receives the carried value.</param>
    /// /// <returns>The same <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public ScenarioChain<T> And(Func<T, ValueTask> effect) =>
        EffectInherit(StepWord.And, string.Empty, ToCT(effect));

    /// <summary>
    /// Adds a <c>And</c> side-effect with a default title. Keeps the current value.
    /// </summary>
    /// /// <param name="effect">Side-effect that receives the carried value.</param>
    /// /// <returns>The same <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public ScenarioChain<T> And(Func<T, CancellationToken, ValueTask> effect) =>
        EffectInherit(StepWord.And, string.Empty, ToCT(effect));

    /// <summary>
    /// Adds a <c>But</c> transformation with an explicit title using sync function.
    /// </summary>
    /// /// <typeparam name="TOut">The result type of the transformation.</typeparam>
    /// /// <param name="title">Display title for this step.</param>
    /// /// <param name="f">Transformation applied to the carried value.</param>
    /// /// <returns>A new <see cref="ScenarioChain{TOut}"/> carrying the transformed value.</returns>
    public ScenarioChain<TOut> But<TOut>(string title, Func<T, TOut> f) =>
        TransformInherit(StepWord.But, title, ToCT(f));

    /// <summary>
    /// Adds a <c>But</c> transformation with an explicit title using task function.
    /// </summary>
    /// /// <typeparam name="TOut">The result type of the transformation.</typeparam>
    /// /// <param name="title">Display title for this step.</param>
    /// /// <param name="f">Transformation applied to the carried value.</param>
    /// /// <returns>A new <see cref="ScenarioChain{TOut}"/> carrying the transformed value.</returns>
    public ScenarioChain<TOut> But<TOut>(string title, Func<T, Task<TOut>> f) =>
        TransformInherit(StepWord.But, title, ToCT(f));

    /// <summary>
    /// Adds a <c>But</c> transformation with an explicit title using a token-aware task function.
    /// </summary>
    /// /// <typeparam name="TOut">The result type of the transformation.</typeparam>
    /// /// <param name="title">Display title for this step.</param>
    /// /// <param name="f">Transformation applied to the carried value.</param>
    /// /// <returns>A new <see cref="ScenarioChain{TOut}"/> carrying the transformed value.</returns>
    public ScenarioChain<TOut> But<TOut>(string title, Func<T, CancellationToken, Task<TOut>> f) =>
        TransformInherit(StepWord.But, title, ToCT(f));

    /// <summary>
    /// Adds a <c>But</c> transformation with an explicit title using value task function.
    /// </summary>
    /// /// <typeparam name="TOut">The result type of the transformation.</typeparam>
    /// /// <param name="title">Display title for this step.</param>
    /// /// <param name="f">Transformation applied to the carried value.</param>
    /// /// <returns>A new <see cref="ScenarioChain{TOut}"/> carrying the transformed value.</returns>
    public ScenarioChain<TOut> But<TOut>(string title, Func<T, ValueTask<TOut>> f) =>
        TransformInherit(StepWord.But, title, ToCT(f));

    /// <summary>
    /// Adds a <c>But</c> transformation with an explicit title using a token-aware value task function.
    /// </summary>
    /// /// <typeparam name="TOut">The result type of the transformation.</typeparam>
    /// /// <param name="title">Display title for this step.</param>
    /// /// <param name="f">Transformation applied to the carried value.</param>
    /// /// <returns>A new <see cref="ScenarioChain{TOut}"/> carrying the transformed value.</returns>
    public ScenarioChain<TOut> But<TOut>(string title, Func<T, CancellationToken, ValueTask<TOut>> f) =>
        TransformInherit(StepWord.But, title, ToCT(f));

    /// <summary>
    /// Adds a <c>But</c> transformation with a default title using sync function.
    /// </summary>
    /// /// <typeparam name="TOut">The result type of the transformation.</typeparam>
    /// /// <param name="f">Transformation applied to the carried value.</param>
    /// /// <returns>A new <see cref="ScenarioChain{TOut}"/> carrying the transformed value.</returns>
    public ScenarioChain<TOut> But<TOut>(Func<T, TOut> f) =>
        TransformInherit(StepWord.But, string.Empty, ToCT(f));

    /// <summary>
    /// Adds a <c>But</c> transformation with a default title using task function.
    /// </summary>
    /// /// <typeparam name="TOut">The result type of the transformation.</typeparam>
    /// /// <param name="f">Transformation applied to the carried value.</param>
    /// /// <returns>A new <see cref="ScenarioChain{TOut}"/> carrying the transformed value.</returns>
    public ScenarioChain<TOut> But<TOut>(Func<T, Task<TOut>> f) =>
        TransformInherit(StepWord.But, string.Empty, ToCT(f));

    /// <summary>
    /// Adds a <c>But</c> transformation with a default title using a token-aware task function.
    /// </summary>
    /// /// <typeparam name="TOut">The result type of the transformation.</typeparam>
    /// /// <param name="f">Transformation applied to the carried value.</param>
    /// /// <returns>A new <see cref="ScenarioChain{TOut}"/> carrying the transformed value.</returns>
    public ScenarioChain<TOut> But<TOut>(Func<T, CancellationToken, Task<TOut>> f) =>
        TransformInherit(StepWord.But, string.Empty, ToCT(f));

    /// <summary>
    /// Adds a <c>But</c> transformation with a default title using value task function.
    /// </summary>
    /// /// <typeparam name="TOut">The result type of the transformation.</typeparam>
    /// /// <param name="f">Transformation applied to the carried value.</param>
    /// /// <returns>A new <see cref="ScenarioChain{TOut}"/> carrying the transformed value.</returns>
    public ScenarioChain<TOut> But<TOut>(Func<T, ValueTask<TOut>> f) =>
        TransformInherit(StepWord.But, string.Empty, ToCT(f));

    /// <summary>
    /// Adds a <c>But</c> transformation with a default title using a token-aware value task function.
    /// </summary>
    /// /// <typeparam name="TOut">The result type of the transformation.</typeparam>
    /// /// <param name="f">Transformation applied to the carried value.</param>
    /// /// <returns>A new <see cref="ScenarioChain{TOut}"/> carrying the transformed value.</returns>
    public ScenarioChain<TOut> But<TOut>(Func<T, CancellationToken, ValueTask<TOut>> f) =>
        TransformInherit(StepWord.But, string.Empty, ToCT(f));

    /// <summary>
    /// Adds a <c>But</c> side-effect with an explicit title. Keeps the current value.
    /// </summary>
    /// /// <param name="title">Display title for this step.</param>
    /// /// <param name="effect">Side-effect that receives the carried value.</param>
    /// /// <returns>The same <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public ScenarioChain<T> But(string title, Action<T> effect) =>
        EffectInherit(StepWord.But, title, ToCT(effect));

    /// <summary>
    /// Adds a <c>But</c> side-effect with an explicit title. Keeps the current value.
    /// </summary>
    /// /// <param name="title">Display title for this step.</param>
    /// /// <param name="effect">Side-effect that receives the carried value.</param>
    /// /// <returns>The same <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public ScenarioChain<T> But(string title, Func<T, Task> effect) =>
        EffectInherit(StepWord.But, title, ToCT(effect));

    /// <summary>
    /// Adds a <c>But</c> side-effect with an explicit title. Keeps the current value.
    /// </summary>
    /// /// <param name="title">Display title for this step.</param>
    /// /// <param name="effect">Side-effect that receives the carried value.</param>
    /// /// <returns>The same <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public ScenarioChain<T> But(string title, Func<T, CancellationToken, Task> effect) =>
        EffectInherit(StepWord.But, title, ToCT(effect));

    /// <summary>
    /// Adds a <c>But</c> side-effect with an explicit title. Keeps the current value.
    /// </summary>
    /// /// <param name="title">Display title for this step.</param>
    /// /// <param name="effect">Side-effect that receives the carried value.</param>
    /// /// <returns>The same <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public ScenarioChain<T> But(string title, Func<T, ValueTask> effect) =>
        EffectInherit(StepWord.But, title, ToCT(effect));

    /// <summary>
    /// Adds a <c>But</c> side-effect with an explicit title. Keeps the current value.
    /// </summary>
    /// /// <param name="title">Display title for this step.</param>
    /// /// <param name="effect">Side-effect that receives the carried value.</param>
    /// /// <returns>The same <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public ScenarioChain<T> But(string title, Func<T, CancellationToken, ValueTask> effect) =>
        EffectInherit(StepWord.But, title, ToCT(effect));

    /// <summary>
    /// Adds a <c>But</c> side-effect with a default title. Keeps the current value.
    /// </summary>
    /// /// <param name="effect">Side-effect that receives the carried value.</param>
    /// /// <returns>The same <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public ScenarioChain<T> But(Action<T> effect) =>
        EffectInherit(StepWord.But, string.Empty, ToCT(effect));

    /// <summary>
    /// Adds a <c>But</c> side-effect with a default title. Keeps the current value.
    /// </summary>
    /// /// <param name="effect">Side-effect that receives the carried value.</param>
    /// /// <returns>The same <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public ScenarioChain<T> But(Func<T, Task> effect) =>
        EffectInherit(StepWord.But, string.Empty, ToCT(effect));

    /// <summary>
    /// Adds a <c>But</c> side-effect with a default title. Keeps the current value.
    /// </summary>
    /// /// <param name="effect">Side-effect that receives the carried value.</param>
    /// /// <returns>The same <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public ScenarioChain<T> But(Func<T, CancellationToken, Task> effect) =>
        EffectInherit(StepWord.But, string.Empty, ToCT(effect));

    /// <summary>
    /// Adds a <c>But</c> side-effect with a default title. Keeps the current value.
    /// </summary>
    /// /// <param name="effect">Side-effect that receives the carried value.</param>
    /// /// <returns>The same <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public ScenarioChain<T> But(Func<T, ValueTask> effect) =>
        EffectInherit(StepWord.But, string.Empty, ToCT(effect));

    /// <summary>
    /// Adds a <c>But</c> side-effect with a default title. Keeps the current value.
    /// </summary>
    /// /// <param name="effect">Side-effect that receives the carried value.</param>
    /// /// <returns>The same <see cref="ScenarioChain{T}"/> for further chaining.</returns>
    public ScenarioChain<T> But(Func<T, CancellationToken, ValueTask> effect) =>
        EffectInherit(StepWord.But, string.Empty, ToCT(effect));

}
