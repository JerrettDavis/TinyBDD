// <auto-generated/>
namespace TinyBDD;
public readonly partial struct ThenChain<T>
{
    /// <summary>
    /// Adds an <c>And</c> boolean assertion with an explicit title
    /// </summary>
    /// <param name="title">Display title for the assertion.</param>
    /// <param name="predicate">Predicate evaluated against the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> And(string title, Func<T, bool> predicate) =>
        Add(StepWord.And, title, Wrap(title, predicate));

    /// <summary>
    /// Adds an <c>And</c> boolean assertion with an explicit title
    /// </summary>
    /// <param name="title">Display title for the assertion.</param>
    /// <param name="predicate">Predicate evaluated against the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> And(string title, Func<T, Task<bool>> predicate) =>
        Add(StepWord.And, title, Wrap(title, predicate));

    /// <summary>
    /// Adds an <c>And</c> boolean assertion with an explicit title observing a token.
    /// </summary>
    /// <param name="title">Display title for the assertion.</param>
    /// <param name="predicate">Predicate evaluated against the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> And(string title, Func<T, CancellationToken, Task<bool>> predicate) =>
        Add(StepWord.And, title, Wrap(title, predicate));

    /// <summary>
    /// Adds an <c>And</c> boolean assertion with an explicit title
    /// </summary>
    /// <param name="title">Display title for the assertion.</param>
    /// <param name="predicate">Predicate evaluated against the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> And(string title, Func<T, ValueTask<bool>> predicate) =>
        Add(StepWord.And, title, Wrap(title, predicate));

    /// <summary>
    /// Adds an <c>And</c> boolean assertion with an explicit title observing a token.
    /// </summary>
    /// <param name="title">Display title for the assertion.</param>
    /// <param name="predicate">Predicate evaluated against the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> And(string title, Func<T, CancellationToken, ValueTask<bool>> predicate) =>
        Add(StepWord.And, title, Wrap(title, predicate));

    /// <summary>
    /// Adds an <c>And</c> boolean assertion with a default title
    /// </summary>
    /// <param name="predicate">Predicate evaluated against the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> And(Func<T, bool> predicate) =>
        Add(StepWord.And, string.Empty, Wrap(nameof(And), predicate));

    /// <summary>
    /// Adds an <c>And</c> boolean assertion with a default title
    /// </summary>
    /// <param name="predicate">Predicate evaluated against the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> And(Func<T, Task<bool>> predicate) =>
        Add(StepWord.And, string.Empty, Wrap(nameof(And), predicate));

    /// <summary>
    /// Adds an <c>And</c> boolean assertion with a default title observing a token.
    /// </summary>
    /// <param name="predicate">Predicate evaluated against the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> And(Func<T, CancellationToken, Task<bool>> predicate) =>
        Add(StepWord.And, string.Empty, Wrap(nameof(And), predicate));

    /// <summary>
    /// Adds an <c>And</c> boolean assertion with a default title
    /// </summary>
    /// <param name="predicate">Predicate evaluated against the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> And(Func<T, ValueTask<bool>> predicate) =>
        Add(StepWord.And, string.Empty, Wrap(nameof(And), predicate));

    /// <summary>
    /// Adds an <c>And</c> boolean assertion with a default title observing a token.
    /// </summary>
    /// <param name="predicate">Predicate evaluated against the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> And(Func<T, CancellationToken, ValueTask<bool>> predicate) =>
        Add(StepWord.And, string.Empty, Wrap(nameof(And), predicate));

    /// <summary>
    /// Adds an <c>And</c> assertion with an explicit title
    /// </summary>
    /// <param name="title">Display title for the assertion.</param>
    /// <param name="assertion">Asynchronous assertion that receives the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> And(string title, Func<T, Task> assertion) =>
        Add(StepWord.And, title, Wrap(assertion));

    /// <summary>
    /// Adds an <c>And</c> assertion with an explicit title observing a token.
    /// </summary>
    /// <param name="title">Display title for the assertion.</param>
    /// <param name="assertion">Asynchronous assertion that receives the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> And(string title, Func<T, CancellationToken, Task> assertion) =>
        Add(StepWord.And, title, Wrap(assertion));

    /// <summary>
    /// Adds an <c>And</c> assertion with an explicit title
    /// </summary>
    /// <param name="title">Display title for the assertion.</param>
    /// <param name="assertion">Asynchronous assertion that receives the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> And(string title, Func<T, ValueTask> assertion) =>
        Add(StepWord.And, title, Wrap(assertion));

    /// <summary>
    /// Adds an <c>And</c> assertion with an explicit title observing a token.
    /// </summary>
    /// <param name="title">Display title for the assertion.</param>
    /// <param name="assertion">Asynchronous assertion that receives the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> And(string title, Func<T, CancellationToken, ValueTask> assertion) =>
        Add(StepWord.And, title, Wrap(assertion));

    /// <summary>
    /// Adds an <c>And</c> assertion with a default title
    /// </summary>
    /// <param name="assertion">Asynchronous assertion that receives the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> And(Func<T, Task> assertion) =>
        Add(StepWord.And, string.Empty, Wrap(assertion));

    /// <summary>
    /// Adds an <c>And</c> assertion with a default title observing a token.
    /// </summary>
    /// <param name="assertion">Asynchronous assertion that receives the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> And(Func<T, CancellationToken, Task> assertion) =>
        Add(StepWord.And, string.Empty, Wrap(assertion));

    /// <summary>
    /// Adds an <c>And</c> assertion with a default title
    /// </summary>
    /// <param name="assertion">Asynchronous assertion that receives the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> And(Func<T, ValueTask> assertion) =>
        Add(StepWord.And, string.Empty, Wrap(assertion));

    /// <summary>
    /// Adds an <c>And</c> assertion with a default title observing a token.
    /// </summary>
    /// <param name="assertion">Asynchronous assertion that receives the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> And(Func<T, CancellationToken, ValueTask> assertion) =>
        Add(StepWord.And, string.Empty, Wrap(assertion));

    /// <summary>
    /// Adds a <c>And</c> assertion with an explicit title (no value parameter).
    /// </summary>
    /// <param name="title">Display title for the assertion.</param>
    /// <param name="assertion">Asynchronous assertion.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> And(string title, Func<Task> assertion) =>
        Add(StepWord.And, title, Wrap(assertion));

    /// <summary>
    /// Adds a <c>And</c> assertion with a default title (no value parameter).
    /// </summary>
    /// <param name="assertion">Asynchronous assertion.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> And(Func<Task> assertion) =>
        Add(StepWord.And, string.Empty, Wrap(assertion));

    /// <summary>
    /// Adds a <c>And</c> assertion with an explicit title using a synchronous action.
    /// </summary>
    /// <param name="title">Display title for the assertion.</param>
    /// <param name="assertion">Asynchronous assertion that receives the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> And(string title, Action<T> assertion) =>
        Add(StepWord.And, title, Wrap(assertion));

    /// <summary>
    /// Adds a <c>And</c> assertion with a default title using a synchronous action.
    /// </summary>
    /// <param name="assertion">Asynchronous assertion that receives the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> And(Action<T> assertion) =>
        Add(StepWord.And, string.Empty, Wrap(assertion));

    /// <summary>
    /// Adds an <c>But</c> boolean assertion with an explicit title
    /// </summary>
    /// <param name="title">Display title for the assertion.</param>
    /// <param name="predicate">Predicate evaluated against the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> But(string title, Func<T, bool> predicate) =>
        Add(StepWord.But, title, Wrap(title, predicate));

    /// <summary>
    /// Adds an <c>But</c> boolean assertion with an explicit title
    /// </summary>
    /// <param name="title">Display title for the assertion.</param>
    /// <param name="predicate">Predicate evaluated against the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> But(string title, Func<T, Task<bool>> predicate) =>
        Add(StepWord.But, title, Wrap(title, predicate));

    /// <summary>
    /// Adds an <c>But</c> boolean assertion with an explicit title observing a token.
    /// </summary>
    /// <param name="title">Display title for the assertion.</param>
    /// <param name="predicate">Predicate evaluated against the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> But(string title, Func<T, CancellationToken, Task<bool>> predicate) =>
        Add(StepWord.But, title, Wrap(title, predicate));

    /// <summary>
    /// Adds an <c>But</c> boolean assertion with an explicit title
    /// </summary>
    /// <param name="title">Display title for the assertion.</param>
    /// <param name="predicate">Predicate evaluated against the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> But(string title, Func<T, ValueTask<bool>> predicate) =>
        Add(StepWord.But, title, Wrap(title, predicate));

    /// <summary>
    /// Adds an <c>But</c> boolean assertion with an explicit title observing a token.
    /// </summary>
    /// <param name="title">Display title for the assertion.</param>
    /// <param name="predicate">Predicate evaluated against the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> But(string title, Func<T, CancellationToken, ValueTask<bool>> predicate) =>
        Add(StepWord.But, title, Wrap(title, predicate));

    /// <summary>
    /// Adds an <c>But</c> boolean assertion with a default title
    /// </summary>
    /// <param name="predicate">Predicate evaluated against the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> But(Func<T, bool> predicate) =>
        Add(StepWord.But, string.Empty, Wrap(nameof(But), predicate));

    /// <summary>
    /// Adds an <c>But</c> boolean assertion with a default title
    /// </summary>
    /// <param name="predicate">Predicate evaluated against the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> But(Func<T, Task<bool>> predicate) =>
        Add(StepWord.But, string.Empty, Wrap(nameof(But), predicate));

    /// <summary>
    /// Adds an <c>But</c> boolean assertion with a default title observing a token.
    /// </summary>
    /// <param name="predicate">Predicate evaluated against the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> But(Func<T, CancellationToken, Task<bool>> predicate) =>
        Add(StepWord.But, string.Empty, Wrap(nameof(But), predicate));

    /// <summary>
    /// Adds an <c>But</c> boolean assertion with a default title
    /// </summary>
    /// <param name="predicate">Predicate evaluated against the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> But(Func<T, ValueTask<bool>> predicate) =>
        Add(StepWord.But, string.Empty, Wrap(nameof(But), predicate));

    /// <summary>
    /// Adds an <c>But</c> boolean assertion with a default title observing a token.
    /// </summary>
    /// <param name="predicate">Predicate evaluated against the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> But(Func<T, CancellationToken, ValueTask<bool>> predicate) =>
        Add(StepWord.But, string.Empty, Wrap(nameof(But), predicate));

    /// <summary>
    /// Adds an <c>But</c> assertion with an explicit title
    /// </summary>
    /// <param name="title">Display title for the assertion.</param>
    /// <param name="assertion">Asynchronous assertion that receives the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> But(string title, Func<T, Task> assertion) =>
        Add(StepWord.But, title, Wrap(assertion));

    /// <summary>
    /// Adds an <c>But</c> assertion with an explicit title observing a token.
    /// </summary>
    /// <param name="title">Display title for the assertion.</param>
    /// <param name="assertion">Asynchronous assertion that receives the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> But(string title, Func<T, CancellationToken, Task> assertion) =>
        Add(StepWord.But, title, Wrap(assertion));

    /// <summary>
    /// Adds an <c>But</c> assertion with an explicit title
    /// </summary>
    /// <param name="title">Display title for the assertion.</param>
    /// <param name="assertion">Asynchronous assertion that receives the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> But(string title, Func<T, ValueTask> assertion) =>
        Add(StepWord.But, title, Wrap(assertion));

    /// <summary>
    /// Adds an <c>But</c> assertion with an explicit title observing a token.
    /// </summary>
    /// <param name="title">Display title for the assertion.</param>
    /// <param name="assertion">Asynchronous assertion that receives the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> But(string title, Func<T, CancellationToken, ValueTask> assertion) =>
        Add(StepWord.But, title, Wrap(assertion));

    /// <summary>
    /// Adds an <c>But</c> assertion with a default title
    /// </summary>
    /// <param name="assertion">Asynchronous assertion that receives the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> But(Func<T, Task> assertion) =>
        Add(StepWord.But, string.Empty, Wrap(assertion));

    /// <summary>
    /// Adds an <c>But</c> assertion with a default title observing a token.
    /// </summary>
    /// <param name="assertion">Asynchronous assertion that receives the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> But(Func<T, CancellationToken, Task> assertion) =>
        Add(StepWord.But, string.Empty, Wrap(assertion));

    /// <summary>
    /// Adds an <c>But</c> assertion with a default title
    /// </summary>
    /// <param name="assertion">Asynchronous assertion that receives the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> But(Func<T, ValueTask> assertion) =>
        Add(StepWord.But, string.Empty, Wrap(assertion));

    /// <summary>
    /// Adds an <c>But</c> assertion with a default title observing a token.
    /// </summary>
    /// <param name="assertion">Asynchronous assertion that receives the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> But(Func<T, CancellationToken, ValueTask> assertion) =>
        Add(StepWord.But, string.Empty, Wrap(assertion));

    /// <summary>
    /// Adds a <c>But</c> assertion with an explicit title (no value parameter).
    /// </summary>
    /// <param name="title">Display title for the assertion.</param>
    /// <param name="assertion">Asynchronous assertion.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> But(string title, Func<Task> assertion) =>
        Add(StepWord.But, title, Wrap(assertion));

    /// <summary>
    /// Adds a <c>But</c> assertion with a default title (no value parameter).
    /// </summary>
    /// <param name="assertion">Asynchronous assertion.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> But(Func<Task> assertion) =>
        Add(StepWord.But, string.Empty, Wrap(assertion));

    /// <summary>
    /// Adds a <c>But</c> assertion with an explicit title using a synchronous action.
    /// </summary>
    /// <param name="title">Display title for the assertion.</param>
    /// <param name="assertion">Asynchronous assertion that receives the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> But(string title, Action<T> assertion) =>
        Add(StepWord.But, title, Wrap(assertion));

    /// <summary>
    /// Adds a <c>But</c> assertion with a default title using a synchronous action.
    /// </summary>
    /// <param name="assertion">Asynchronous assertion that receives the carried value.</param>
    /// <returns>A <see cref="ThenChain{T}"/> for further chaining.</returns>
    public ThenChain<T> But(Action<T> assertion) =>
        Add(StepWord.But, string.Empty, Wrap(assertion));

}
